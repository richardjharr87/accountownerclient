{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Inputs/Input.js","Utility/InputConfiguration.js","Utility/FormUtility.js","containers/Owner/UpdateOwner/UpdateOwner.js"],"names":["closeErrorModal","type","actionTypes","handleHTTPError","error","props","response","status","execute404Handler","execute500Handler","executeOtherErrorHandler","instance","axios","create","baseURL","headers","headerType","getData","url","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","ownersLoading","successModal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","errorModal","closeModal","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","returnInputConfiguration","name","element","validation","required","valid","address","maxLength","dateOfBirth","moment","returnAcctConfiguration","accountType","dateCreated","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","startsWith","target","validationResponse","checkValidity","isValid","validationObject","trim","length","countInvalidElements","ownerForm","UpdateOwner","state","isFormValid","componentWillMount","setState","componentDidMount","match","params","onGetOwnerById","componentWillReceiveProps","nextProps","nameObject","dateObject","addressObject","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","redirectToOwnerList","history","handleChangeEvent","formUtilityActions","counter","this","horizontal","onSubmit","map","mdOffset","md","disabled","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","Component","connect","repository","errorHandler","repositoryActions","owner"],"mappings":"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","file":"static/js/10.de3301c1.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:8080',\r\n    baseURL: 'https://brokerage.herokuapp.com',\r\n    headers: {\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\nimport axios from '../../axios/axios';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            dispatch(postDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nexport const closeSuccessModal = (url, props) => {\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}\r\n\r\nexport const ownersLoading = () => {\r\n    return {\r\n        type: actionTypes.OWNERS_LOADING\r\n    }\r\n}","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst successModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default successModal;","import React, { Fragment } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst errorModal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default errorModal;","import React, { Fragment } from 'react';\r\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl'\r\n                            showYearDropdown dropdownMode=\"select\" />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {inputField}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default input;","import moment from 'moment';\r\n\r\nexport const returnInputConfiguration = () => {\r\n    return {\r\n        name: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Name:'\r\n        },\r\n        address: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Address:'\r\n        },\r\n        dateOfBirth: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'Date of birth:'\r\n        }\r\n    }\r\n}\r\n\r\nexport const returnAcctConfiguration = () => {\r\n    return {\r\n        accountType: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Account type:'\r\n        },\r\n        dateCreated: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'Created date:'\r\n        }\r\n    }\r\n}","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n\r\n    return formElementsArray;\r\n}\r\n\r\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\r\n    let formElement = { ...updatedOwnerForm[id] };\r\n    formElement.value = id.startsWith('date') ? event : event.target.value;\r\n    formElement.touched = true;\r\n\r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n\r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n\r\n    return formElement;\r\n}\r\n\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n\r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n\r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= validation.maxLength;\r\n            validationObject.errorMessage = `Not allowed more than ${validation.maxLength} characters`;\r\n        }\r\n\r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\nexport const countInvalidElements = (ownerForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in ownerForm) {\r\n        if (!ownerForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}","import React, { Component } from 'react';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n\r\nclass UpdateOwner extends Component {\r\n    state = {\r\n        ownerForm: {},\r\n        isFormValid: true\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.setState({ ownerForm: returnInputConfiguration() });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const id = this.props.match.params.id;\r\n        const url = '/api/owner/' + id;\r\n        this.props.onGetOwnerById(url, { ...this.props });\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        let nameObject = { ...updatedOwnerForm.name };\r\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\r\n        let addressObject = { ...updatedOwnerForm.address };\r\n\r\n        nameObject.value = nextProps.data.name;\r\n        nameObject.valid = true;\r\n        dateObject.value = moment(nextProps.data.dateOfBirth);\r\n        addressObject.value = nextProps.data.address;\r\n        addressObject.valid = true;\r\n\r\n        updatedOwnerForm['name'] = nameObject;\r\n        updatedOwnerForm['dateOfBirth'] = dateObject;\r\n        updatedOwnerForm['address'] = addressObject;\r\n        this.setState({ ownerForm: updatedOwnerForm });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ownerToUpdate = {\r\n            name: this.state.ownerForm.name.value,\r\n            dateOfBirth: this.state.ownerForm.dateOfBirth.value,\r\n            address: this.state.ownerForm.address.value\r\n        }\r\n\r\n        const url = \"/api/owner/\" + this.props.data.id;\r\n\r\n        this.props.onUpdateOwner(url, ownerToUpdate, { ...this.props });\r\n    }\r\n\r\n    redirectToOwnerList = () => {\r\n        this.props.history.push('/owner-List');\r\n    }\r\n\r\n    handleChangeEvent = (event, id) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\r\n\r\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\r\n\r\n        this.setState({ ownerForm: updatedOwnerForm, isFormValid: counter === 0 });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\r\n\r\n        return (\r\n            <Well>\r\n                <Form horizontal onSubmit={this.updateOwner}>\r\n                    {\r\n                        formElementsArray.map(element => {\r\n                            return <Input key={element.id} elementType={element.config.element}\r\n                                id={element.id} label={element.config.label}\r\n                                type={element.config.type} value={element.config.value}\r\n                                changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                                errorMessage={element.config.errorMessage} invalid={!element.config.valid}\r\n                                shouldValidate={element.config.validation}\r\n                                touched={element.config.touched}\r\n                                blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                        })\r\n                    }\r\n                    <br />\r\n                    <FormGroup>\r\n                        <Col mdOffset={6} md={1}>\r\n                            <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'}\r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Well>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data,\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(url, props)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);"],"sourceRoot":""}