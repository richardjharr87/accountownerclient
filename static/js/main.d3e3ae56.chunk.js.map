{"version":3,"sources":["store/actions/actionTypes.js","components/Navigation/Navigation.js","components/Layout/Layout.js","components/Home/Home.js","components/ErrorPages/NotFound/NotFound.js","hoc/AsyncComponent/AsyncComponent.js","components/ErrorPages/InternalServer/InternalServer.js","containers/App.js","serviceWorker.js","store/reducers/repositoryReducer.js","store/reducers/errorHandlerReducer.js","index.js","components/Home/bribe.svg"],"names":["GET_DATA_SUCCESS","POST_DATA_SUCCESS","PUT_DATA_SUCCESS","DELETE_DATA_SUCCESS","HTTP_404_ERROR","HTTP_500_ERROR","HTTP_OTHER_ERROR","CLOSE_ERROR_MODAL","CLOSE_SUCCESS_MODAL","OWNERS_LOADING","Navigation","props","Col","md","Navbar","inverse","collapseOnSelect","Header","Brand","to","exact","Toggle","Collapse","Nav","NavItem","eventKey","Layout","Grid","Row","children","Home","className","src","logo","alt","height","NotFound","class","asyncComponent","importComponent","state","component","then","cmp","setState","default","C","this","Component","InternalServer","AsyncOwnerList","AsyncOwnerDetails","AsyncCreateOwner","AsyncUpdateOwner","AsyncDeleteOwner","AsyncCreateAccount","AsyncUpdateAccount","AsyncDeleteAccount","App","basename","path","Boolean","window","location","hostname","match","initialState","data","showSuccessModal","ownersLoading","executeGetDataSuccess","action","executePostDataSuccess","executePutDataSuccess","executeDeleteDataSuccess","executeCloseSuccessModal","history","push","url","executeOwnersLoading","reducer","type","actionTypes","showErrorModal","errorMessage","execute404","execute500","executeOtherError","error","response","executeCloseErrorModal","rootReducers","combineReducers","repository","repositoryReducer","errorHandler","errorHandlerReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d3e3ae56.chunk.js","sourcesContent":["export const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\r\nexport const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\r\nexport const PUT_DATA_SUCCESS = 'PUT_DATA_SUCCESS';\r\nexport const DELETE_DATA_SUCCESS = 'DELETE_DATA_SUCCESS';\r\n\r\nexport const HTTP_404_ERROR = 'HTTP_404_ERROR';\r\nexport const HTTP_500_ERROR = 'HTTP_500_ERROR';\r\nexport const HTTP_OTHER_ERROR = 'HTTP_OTHER_ERROR';\r\n\r\nexport const CLOSE_ERROR_MODAL = 'CLOSE_ERROR_MODAL';\r\nexport const CLOSE_SUCCESS_MODAL = 'CLOSE_SUCCESS_MODAL';\r\n\r\nexport const OWNERS_LOADING = 'OWNERS_LOADING';","import React from 'react';\r\nimport './Navigation.css';\r\nimport { Col, Navbar, Nav, NavItem } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nconst Navigation = (props) => {\r\n    return (\r\n        <Col md={12} >\r\n            <Navbar inverse collapseOnSelect>\r\n                <Navbar.Header>\r\n                    <Navbar.Brand>\r\n                        <NavLink to={'/'} exact >Home Page</NavLink>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle />\r\n                </Navbar.Header>\r\n                <Navbar.Collapse>\r\n                    <Nav>\r\n                        <LinkContainer to={'/owner-list'} exact>\r\n                            <NavItem eventKey={1}>\r\n                                Owner Actions\r\n                            </NavItem>\r\n                        </LinkContainer>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { Grid, Row } from 'react-bootstrap';\r\nimport Navigation from '../Navigation/Navigation';\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <Grid>\r\n            <Row>\r\n                <Navigation />\r\n            </Row>\r\n            <main>\r\n                {props.children}\r\n            </main>\r\n        </Grid>\r\n    )\r\n}\r\nexport default Layout;","import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport './Home.css';\r\nimport logo from './bribe.svg'\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <div className={'homeText'}>\r\n                    <p>WELCOME TO RICHARD'S BROKERAGE</p>\r\n                    <img src={logo} alt=\"Money changing hands\" height=\"300\"></img>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './NotFound.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = (props) => {\r\n    return (\r\n        // <p className={'notFound'}>\r\n        //     \"404 SORRY COULDN'T FIND IT!!!\"\r\n        // </p>\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"error-template\">\r\n                        <h1>\r\n                            Oops!</h1>\r\n                        <h2>\r\n                            404 Not Found</h2>\r\n                        <div class=\"error-details\">\r\n                            Sorry, an error has occurred, Requested page not found!\r\n                </div>\r\n                        <div class=\"error-actions\">\r\n                            <Link to=\"/\" className=\"btn btn-primary btn-lg\"><span class=\"glyphicon glyphicon-home\"></span>\r\n                                Take Me Home </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\n\r\nconst asyncComponent = (importComponent) => {\r\n    return class extends Component {\r\n        state = { component: null }\r\n\r\n        componentDidMount() { \r\n            importComponent()\r\n            .then(cmp => { \r\n                this.setState({ component: cmp.default }); \r\n            }); \r\n        } \r\n        render() {\r\n            const C = this.state.component;\r\n\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncComponent; ","import React from 'react';\r\nimport './InternalServer.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst InternalServer = (props) => {\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"error-template\">\r\n                        <h1>\r\n                            Oops!</h1>\r\n                        <h2>\r\n                            500 Internal Server Error</h2>\r\n                        <div class=\"error-details\">\r\n                            Unfortunately we're having trouble loading the page you are looking for.\r\n                        </div>\r\n                        <div class=\"error-actions\">\r\n                            <Link to=\"/\" className=\"btn btn-primary btn-lg\"><span class=\"glyphicon glyphicon-home\"></span>\r\n                                Take Me Home </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InternalServer;","import React from 'react';\r\nimport './App.css';\r\nimport Layout from '../components/Layout/Layout';\r\nimport Home from '../components/Home/Home';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport NotFound from '../components/ErrorPages/NotFound/NotFound';\r\nimport asyncComponent from '../hoc/AsyncComponent/AsyncComponent';\r\nimport InternalServer from '../components/ErrorPages/InternalServer/InternalServer';\r\n\r\nconst AsyncOwnerList = asyncComponent(() => {\r\n  return import('./Owner/OwnerList/OwnerList');\r\n});\r\nconst AsyncOwnerDetails = asyncComponent(() => {\r\n  return import('./Owner/OwnerDetails/OwnerDetails');\r\n});\r\nconst AsyncCreateOwner = asyncComponent(() => {\r\n  return import('./Owner/CreateOwner/CreateOwner');\r\n});\r\nconst AsyncUpdateOwner = asyncComponent(() => {\r\n  return import('./Owner/UpdateOwner/UpdateOwner');\r\n});\r\nconst AsyncDeleteOwner = asyncComponent(() => {\r\n  return import('./Owner/DeleteOwner/DeleteOwner');\r\n});\r\nconst AsyncCreateAccount = asyncComponent(() => {\r\n  return import('./Account/CreateAccount/CreateAccount');\r\n});\r\nconst AsyncUpdateAccount = asyncComponent(() => {\r\n  return import('./Account/UpdateAccount/UpdateAccount');\r\n});\r\nconst AsyncDeleteAccount = asyncComponent(() => {\r\n  return import('./Account/DeleteAccount/DeleteAccount');\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename=\"/accountownerclient\">\r\n      <Layout>\r\n        <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/owner-list\" component={AsyncOwnerList\r\n        } />\r\n        <Route path=\"/ownerDetails/:id\" component={AsyncOwnerDetails} />\r\n        <Route path=\"/createOwner/\" component={AsyncCreateOwner} />\r\n        <Route path=\"/updateOwner/:id\" component={AsyncUpdateOwner} />\r\n        <Route path=\"/deleteOwner/:id\" component={AsyncDeleteOwner} />\r\n        <Route path=\"/createAccount/:ownerId\" component={AsyncCreateAccount} />\r\n        <Route path=\"/updateAccount/:id\" component={AsyncUpdateAccount} />\r\n        <Route path=\"/deleteAccount/:id\" component={AsyncDeleteAccount} />\r\n        <Route path=\"/500\" component={InternalServer} />\r\n        <Route path=\"*\" component={NotFound} />\r\n        </Switch>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    data: null,\r\n    showSuccessModal: false,\r\n    ownersLoading: false\r\n}\r\n\r\nconst executeGetDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        data: action.data,\r\n        ownersLoading: false\r\n    }\r\n}\r\n\r\nconst executePostDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n\r\nconst executePutDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n\r\nconst executeDeleteDataSuccess = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showSuccessModal: true\r\n    }\r\n}\r\n\r\nconst executeCloseSuccessModal = (state, action) => {\r\n    action.props.history.push(action.url);\r\n    return {\r\n        ...state,\r\n        showSuccessModal: false\r\n    }\r\n}\r\n\r\nconst executeOwnersLoading = (state, action) => {\r\n    return {\r\n        ...state,\r\n        ownersLoading: true\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.GET_DATA_SUCCESS:\r\n            return executeGetDataSuccess(state, action);\r\n        case actionTypes.POST_DATA_SUCCESS:\r\n            return executePostDataSuccess(state, action);\r\n        case actionTypes.PUT_DATA_SUCCESS:\r\n            return executePutDataSuccess(state, action);\r\n        case actionTypes.DELETE_DATA_SUCCESS:\r\n            return executeDeleteDataSuccess(state, action);\r\n        case actionTypes.CLOSE_SUCCESS_MODAL:\r\n            return executeCloseSuccessModal(state, action);\r\n        case actionTypes.OWNERS_LOADING:\r\n            return executeOwnersLoading(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    showErrorModal: false,\r\n    errorMessage: ''\r\n}\r\n\r\nconst execute404 = (state, action) => {\r\n    action.props.history.push('/404');\r\n    return { ...state }\r\n}\r\n\r\nconst execute500 = (state, action) => {\r\n    action.props.history.push('/500');\r\n    return { ...state }\r\n}\r\n\r\nconst executeOtherError = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showErrorModal: true,\r\n        errorMessage: action.error.response.data\r\n    };\r\n}\r\n\r\nconst executeCloseErrorModal = (state, action) => {\r\n    return {\r\n        ...state,\r\n        showErrorModal: false,\r\n        errorMessage: ''\r\n    };\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.HTTP_404_ERROR:\r\n            return execute404(state, action);\r\n        case actionTypes.HTTP_500_ERROR:\r\n            return execute500(state, action);\r\n        case actionTypes.HTTP_OTHER_ERROR:\r\n            return executeOtherError(state, action);\r\n        case actionTypes.CLOSE_ERROR_MODAL:\r\n            return executeCloseErrorModal(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport repositoryReducer from './store/reducers/repositoryReducer';\r\nimport errorHandlerReducer from './store/reducers/errorHandlerReducer';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/css/bootstrap-theme.css';\r\n\r\nconst rootReducers = combineReducers({\r\n    repository: repositoryReducer,\r\n    errorHandler: errorHandlerReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(\r\n    rootReducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/bribe.8c20481d.svg\";"],"sourceRoot":""}